{
	"info": {
		"_postman_id": "245e91bd-507a-43fc-a042-89cd65f56cf0",
		"name": "Tugas 5_Bima Prawang Saputra_QA Engineer_Batch 5_Sesi 6 Api Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30209921",
		"_collection_link": "https://galactic-capsule-5441.postman.co/workspace/suara_news_api~d6082c11-4183-49ac-adcd-250197c90461/collection/30209921-245e91bd-507a-43fc-a042-89cd65f56cf0?action=share&source=collection_link&creator=30209921"
	},
	"item": [
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Tes untuk memeriksa status kode\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Tes untuk memeriksa nilai dalam respons\r",
							"pm.test(\"Response has page 2\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.page).to.eql(2);\r",
							"});\r",
							"\r",
							"// Definisikan schema untuk validasi struktur respons\r",
							"const schema = {\r",
							"  type: \"object\",\r",
							"  properties: {\r",
							"    page: { type: \"number\" },\r",
							"    per_page: { type: \"number\" },\r",
							"    total: { type: \"number\" },\r",
							"    total_pages: { type: \"number\" },\r",
							"    data: {\r",
							"      type: \"array\",\r",
							"      items: {\r",
							"        type: \"object\",\r",
							"        properties: {\r",
							"          id: { type: \"number\" },\r",
							"          email: { type: \"string\" },\r",
							"          first_name: { type: \"string\" },\r",
							"          last_name: { type: \"string\" },\r",
							"          avatar: { type: \"string\" }\r",
							"        },\r",
							"        required: [\"id\", \"email\", \"first_name\", \"last_name\", \"avatar\"]\r",
							"      }\r",
							"    }\r",
							"  },\r",
							"  required: [\"page\", \"per_page\", \"total\", \"total_pages\", \"data\"]\r",
							"};\r",
							"\r",
							"// Tes untuk memvalidasi respons sesuai schema\r",
							"pm.test(\"Validasi schema respons\", function() {\r",
							"  pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users?page=2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Definisikan schema untuk validasi struktur respons POST\r",
							"const postSchema = {\r",
							"  type: \"object\",\r",
							"  properties: {\r",
							"    name: { type: \"string\" },\r",
							"    job: { type: \"string\" },\r",
							"    id: { type: \"string\" }, // Anggap API mengembalikan ID baru yang dibuat\r",
							"    createdAt: { type: \"string\" } // Anggap API mengembalikan timestamp pembuatan\r",
							"  },\r",
							"  required: [\"name\", \"job\", \"id\", \"createdAt\"] // Sesuaikan dengan data yang selalu diharapkan dalam respons\r",
							"};\r",
							"\r",
							"// Tes untuk memvalidasi respons sesuai schema\r",
							"pm.test(\"Validasi schema respons untuk POST\", function() {\r",
							"  pm.response.to.have.jsonSchema(postSchema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Definisikan schema untuk validasi struktur respons DELETE jika ada body\r",
							"const deleteSchema = {\r",
							"  type: \"object\",\r",
							"  properties: {\r",
							"    message: { type: \"string\" } // Contoh jika ada pesan konfirmasi\r",
							"  },\r",
							"  required: [\"message\"]\r",
							"};\r",
							"\r",
							"// Tes untuk memvalidasi respons sesuai schema jika ada body\r",
							"pm.test(\"Validasi schema respons untuk DELETE\", function() {\r",
							"  if (pm.response.text()) { // Hanya validasi jika ada body respons\r",
							"    pm.response.to.have.jsonSchema(deleteSchema);\r",
							"  }\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Definisikan schema untuk validasi struktur respons PUT\r",
							"const putSchema = {\r",
							"  type: \"object\",\r",
							"  properties: {\r",
							"    name: { type: \"string\" }, // Anggap respons mengembalikan nama yang mungkin diperbarui\r",
							"    job: { type: \"string\" }, // Job yang telah diperbarui\r",
							"    updatedAt: { type: \"string\" } // Timestamp pembaruan\r",
							"  },\r",
							"  required: [\"name\", \"job\", \"updatedAt\"] // Sesuaikan dengan data yang selalu diharapkan dalam respons\r",
							"};\r",
							"\r",
							"// Tes untuk memvalidasi respons sesuai schema\r",
							"pm.test(\"Validasi schema respons untuk PUT\", function() {\r",
							"  pm.response.to.have.jsonSchema(putSchema);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://reqres.in/api/users/2",
					"protocol": "https",
					"host": [
						"reqres",
						"in"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		}
	]
}